Creating a full kdb competitor in Racket is a large task that requires extensive knowledge of both databases and the Racket programming language. However, I can help you get started by providing a simple example of a basic in-memory time-series database in Racket.

Create a new file called time_series_db.rkt and add the following code:
This code provides a basic implementation of an in-memory time-series database with the following functionality:

Initializing an empty database
Inserting new entries with timestamp and value
Retrieving all entries from the database
Filtering entries by a specific time range

#lang racket

; Define a time-series entry struct
(struct ts-entry (timestamp value) #:prefab)

; Define a time-series database struct
(struct ts-db (name data) #:prefab)

; Initialize an empty time-series database
(define (init-db name)
  (ts-db name '()))

; Insert a new entry into the time-series database
(define (insert-entry db timestamp value)
  (ts-db (ts-db-name db) (cons (ts-entry timestamp value) (ts-db-data db))))

; Retrieve all entries from the time-series database
(define (get-entries db)
  (ts-db-data db))

; Filter entries by a specific time range
(define (filter-entries db start-time end-time)
  (filter (lambda (entry)
            (and (<= start-time (ts-entry-timestamp entry))
                 (<= (ts-entry-timestamp entry) end-time)))
          (get-entries db)))

; Example usage
(define my-db (init-db "example-db"))
(set! my-db (insert-entry my-db (current-seconds) 42))
(set! my-db (insert-entry my-db (+ (current-seconds) 60) 84))
(set! my-db (insert-entry my-db (+ (current-seconds) 120) 126))

(displayln (filter-entries my-db (current-seconds) (+ (current-seconds) 100)))